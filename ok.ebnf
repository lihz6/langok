SourceFile = { ImportDecl ";" } { ( TypeDecl | ConstDecl | VarDecl | FunctionDecl | MethodDecl ) ";" } .
    ImportDecl = "use" ( ImportSpec | "(" { ImportSpec ";" } ")" ) .
        ImportSpec = ( "." | PackageName ) ImportPath .
            PackageName = identifier .
                identifier = letter { letter | unicode_digit } .
                    letter = unicode_letter | "_" .
            ImportPath = string_lit .
    TypeDecl = "def" ( TypeDef | "(" { TypeDef ";" } ")" ) .
        TypeDef = identifier [ TypeParameters ] Type .
            TypeParameters = "[" TypeParamDecl { "," TypeParamDecl } [ "," ] "]" .
                TypeParamDecl = IdentifierList TypeConstraint .
                    IdentifierList = identifier { "," identifier } .
                    TypeConstraint = Type .
                        Type = TypeName [ TypeArgs ] | TypeLit | "(" Type ")" | Type { ( "|" | "&" ) Type } .
                            TypeName = identifier |  PackageName "." identifier .
                            TypeArgs = "[" Type { "," Type } [ "," ] "]" .
                            TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType .
                                ArrayType = "[" int_lit "]" ElementType .
                                    int_lit = decimal_lit | binary_lit | octal_lit | hex_lit .
                                    ElementType = Type .
                                StructType = "struct" "(" { FieldDecl ";" } ")" .
                                    FieldDecl = (IdentifierList Type | EmbeddedField) [ Tag ] .
                                        EmbeddedField = [ "*" ] TypeName .
                                        Tag = string_lit .
                                PointerType = "*" BaseType .
                                    BaseType = Type .
                                FunctionType = "func" Signature .
                                    Signature = Parameters [ Result ] .
                                        Parameters = "(" [ ParameterList [ "," ] ] ")" .
                                            ParameterList = ParameterDecl { "," ParameterDecl } .
                                                ParameterDecl = [ IdentifierList ] [ "..." ] Type .
                                        Result = Parameters | Type .
                                InterfaceType = "interface" "{" { InterfaceElem ";" } "}" .
                                    InterfaceElem = MethodElem | TypeElem .
                                        MethodElem = MethodName Signature .
                                            MethodName = identifier .
                                        TypeElem = TypeTerm { "|" TypeTerm } .
                                            TypeTerm = Type | UnderlyingType .
                                                UnderlyingType = "~" Type .
                                SliceType = "[" "]" ElementType .
                                MapType = "map" "[" KeyType "]" ElementType .
                                    KeyType = Type .
                                ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .
    ConstDecl = "const" ( ConstSpec | "(" { ConstSpec } ")" ) .
        ConstSpec = IdentifierList [ [ Type ] "=" BasicLit ] ";" .
            BasicLit = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
    VarDecl = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
        VarSpec = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
            ExpressionList = Expression { "," Expression } .
                Expression = UnaryExpr | Expression binary_op Expression .
                    UnaryExpr = PrimaryExpr | unary_op UnaryExpr .
                        PrimaryExpr = Operand | Conversion | MethodExpr | PrimaryExpr Selector | PrimaryExpr Index | PrimaryExpr Slice | PrimaryExpr TypeAssertion | PrimaryExpr Arguments .
                            Operand = Literal | OperandName [ TypeArgs ] | "(" Expression ")" .
                                Literal = BasicLit | CompositeLit | FunctionLit .
                                    CompositeLit = LiteralType LiteralValue .
                                        LiteralType = StructType | ArrayType | "[" "..." "]" ElementType | SliceType | MapType | TypeName .
                                        LiteralValue = "{" [ ElementList [ "," ] ] "}" .
                                            ElementList = KeyedElement { "," KeyedElement } .
                                                KeyedElement = [ Key ":" ] Element .
                                                    Key = FieldName | Expression | LiteralValue .
                                                        FieldName = identifier .
                                                    Element = Expression | LiteralValue .
                                    FunctionLit = "func" Signature FunctionBody .
                                        FunctionBody = Block .
                                            Block = "{" StatementList "}" .
                                                StatementList = { Statement ";" } .
                                                    Statement = Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt .
                                                        LabeledStmt = Label ":" Statement .
                                                            Label = identifier .
                                                        SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
                                                            EmptyStmt = .
                                                            ExpressionStmt = Expression .
                                                            SendStmt = Channel "<-" Expression .
                                                                Channel = Expression .
                                                            IncDecStmt = Expression ( "++" | "--" ) .
                                                            Assignment = ExpressionList assign_op ExpressionList .
                                                                assign_op = [ add_op | mul_op ] "=" .
                                                                    add_op = "+" | "-" | "|" | "^" .
                                                                    mul_op = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" .
                                                            ShortVarDecl = IdentifierList ":=" ExpressionList .
                                                        GoStmt = "go" Expression .
                                                        ReturnStmt = "return" [ ExpressionList ] .
                                                        BreakStmt = "break" [ Label ] .
                                                        ContinueStmt = "continue" [ Label ] .
                                                        GotoStmt = "goto" Label .
                                                        FallthroughStmt = "fallthrough" .
                                                        IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
                                                        SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
                                                            ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
                                                                ExprCaseClause = ExprSwitchCase ":" StatementList .
                                                                    ExprSwitchCase = "case" ExpressionList | "default" .
                                                            TypeSwitchStmt = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
                                                                TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
                                                                TypeCaseClause = TypeSwitchCase ":" StatementList .
                                                                    TypeSwitchCase = "case" TypeList | "default" .
                                                                        TypeList = Type { "," Type } .
                                                        SelectStmt = "select" "{" { CommClause } "}" .
                                                            CommClause = CommCase ":" StatementList .
                                                                CommCase = "case" ( SendStmt | RecvStmt ) | "default" .
                                                                    RecvStmt = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
                                                                        RecvExpr = Expression .
                                                        ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
                                                            Condition = Expression .
                                                            ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
                                                                InitStmt = SimpleStmt .
                                                                PostStmt = SimpleStmt .
                                                            RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
                                                        DeferStmt = "defer" Expression .
                                OperandName = identifier | QualifiedIdent .
                                    QualifiedIdent = PackageName "." identifier .
                            Conversion = Type "(" Expression [ "," ] ")" .
                            MethodExpr = ReceiverType "." MethodName .
                                ReceiverType = Type .
                            Selector = "." identifier .
                            Index = "[" Expression "]" .
                            Slice = "[" [ Expression ] ":" [ Expression ] "]" | "[" [ Expression ] ":" Expression ":" Expression "]" .
                            TypeAssertion = "." "(" Type ")" .
                            Arguments = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
                        unary_op = "+" | "-" | "!" | "^" | "*" | "&" | "<-" .
                    binary_op = "||" | "&&" | rel_op | add_op | mul_op .
                        rel_op = "==" | "!=" | "<" | "<=" | ">" | ">=" .
    FunctionDecl = "func" FunctionName [ TypeParameters ] Signature [ FunctionBody ] .
        FunctionName = identifier .
    MethodDecl = "fun" Receiver "{" { MethodSpec } "}" .
        Receiver = "(" identifier [ "*" ] ReceiverType ")" .
        MethodSpec = MethodName Signature [ FunctionBody ] .
